
@{
    ViewData["Title"] = "Create";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

@inject IViewLocalizer _localizer;
<form id="myForm" asp-action="Create" asp-controller="Product" method="post" enctype="multipart/form-data">
<div class="page-content">
    <div class="container-fluid">
            <!-- start page title -->
            <div class="row">
                <div class="col-12">
                    <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                        <h4 class="mb-sm-0">@_localizer["tablename"]</h4>

                        <div class="page-title-right">
                            <ol class="breadcrumb m-0">
                                <li class="breadcrumb-item"><a href="javascript: void(0);">@_localizer["add"]</a></li>
                                <li class="breadcrumb-item active">@_localizer["product"]</li>
                            </ol>
                        </div>

                    </div>
                </div>
            </div>
            <!-- end page title -->
            @await Component.InvokeAsync("Product", new { viewType = "Create" })
     
       </div>

    </div>
    <!-- container-fluid -->
</div>
<!-- End Page-content -->

</form>



@section Styles {
    <!-- quill css -->
    <link href="/admin/libs/quill/quill.core.css" rel="stylesheet" type="text/css" />
    <link href="/admin/libs/quill/quill.bubble.css" rel="stylesheet" type="text/css" />
    <link href="/admin/libs/quill/quill.snow.css" rel="stylesheet" type="text/css" />
}

@section Scripts {
    <!-- ckeditor -->
    <script src="/admin/libs/%40ckeditor/ckeditor5-build-classic/build/ckeditor.js"></script>

    <!-- quill js -->

    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <!-- init js -->
    <script src="/admin/js/pages/form-editor.init.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        // Initialize Quill editor
        var quill = new Quill('#editor', {
            theme: 'snow'
        });

        const form = document.getElementById('myForm');
        var existingContent = '@Html.Raw(Model.Description)';
        if (existingContent) {
            quill.root.innerHTML = existingContent;
        }
        // Add a submit event listener to the form
        form.addEventListener('submit', function (event) {
            // Show an alert
            var descriptionInput = document.querySelector('input[name=Description]');
            descriptionInput.value = quill.root.innerHTML; // Get the content from Quill editor

        });

        function updateOptions(selectElement) {
            const attributeId = $(selectElement).val();
            const $optionsSelect = $(selectElement).parents('.container01').find('.options-select');
          
            if (attributeId) {
                $.ajax({
                    url: '/Admin/AttributeOption/GetOptions',
                    data: { attributeId: attributeId },
                    success: function (data) {
                        $optionsSelect.empty().append('<option value="">Select Option</option>');
                        $.each(data, function (index, item) {
                            $optionsSelect.append($('<option>', { value: item.id, text: item.optionName }));
                        });
                    },
                    error: function () {
                        console.error('Error fetching options');
                    }
                });
            } else {
                $optionsSelect.empty().append('<option value="">Select Option</option>');
            }
        }

        function duplicateForm() {
            // Get the container holding the forms
            const formContainer = document.getElementById('form-container');

            // Select the first form with class 'io'
            const originalForm = formContainer.querySelector('.container01');

            if (originalForm) {
                // Clone the form and its children
                const clonedForm = originalForm.cloneNode(true);

                // Append the cloned form to the container
                formContainer.appendChild(clonedForm);
               checkCount()
            } else {
                console.error('No form with class "io" found.');
            }
            
        }

        function populateAttributes() {
            $.ajax({
                url: '/Admin/Attribute/GetAttributes', // Your API endpoint to get attributes
                method: 'GET',
                success: function (data) {
                    
                    $('.attribute-select').each(function () {
                        const $this = $(this);
                        $this.empty().append('<option value="">Select Attribute</option>');
                        $.each(data, function (index, item) {
                            $this.append($('<option>', { value: item.id, text: item.attributeName }));
                        });
                    });
                },
                error: function () {
                    console.error('Error fetching attributes');
                }
            });
        }
        populateAttributes();
          // Event listener for existing and new forms
            $(document).on('change', '.attribute-select', function() {
                updateOptions(this);
            });
        function checkCount() {
            $.ajax({
                url: '/Admin/Attribute/GetAttributes', // Your API endpoint to get attributes
                method: 'GET',
                success: function (data) {
                    var count = $('.container01').length;
                    if(count>=data.length){
                      $(".button-add").removeAttr('href').addClass('hidden');
                    }
                   
                },
                error: function () {
                    console.error('Error fetching attributes');
                }
            });
        }
        checkCount();
    </script>
}